{"version":3,"sources":["app/Navbar.js","features/posts/components/PostAuthor.js","features/posts/components/TimeAgo.js","features/posts/components/PostsList.js","features/posts/postsSlice.js","features/posts/components/AddPostForm.js","features/posts/components/SinglePostPage.js","features/posts/components/EditPostForm.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js"],"names":["Navbar","className","to","PostAuthor","userId","author","useSelector","state","users","find","user","id","name","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","title","PostList","posts","map","post","key","content","substring","postsSlice","createSlice","initialState","reducers","postAdded","reducer","action","push","payload","prepare","nanoid","Date","toISOString","postUpdated","existingPost","actions","AddPostForm","useState","setTitle","setContent","setUserId","dispatch","useDispatch","canSave","Boolean","htmlFor","type","value","onChange","e","target","onClick","disabled","SinglePostPage","postId","match","params","EditPostForm","history","useHistory","placeholder","App","seedDate","exact","path","render","Fragment","component","usersSlice","configureStore","postsReducer","usersReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","resource","server","schema","req","data","normalizedRequestAttrs","Error","create","get","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","notifications","Array","db","template","between","message","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","reactions","thumbsUp","hooray","heart","rocket","eyes","association","past","text","paragraph","serializers","seeds","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.55873674.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  );\n};\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n  const author = useSelector(state =>\r\n    state.users.find(user => user.id === userId)\r\n  );\r\n\r\n  return (\r\n    <span>\r\n      by {author ? author.name : 'Unknown user'}\r\n    </span>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { parseISO, formatDistanceToNow } from 'date-fns';\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = '';\r\n\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\n\r\nexport const PostList = () => {\r\n  const posts = useSelector(state => state.posts);\r\n\r\n  return (\r\n    <section>\r\n      <h2>Posts</h2>\r\n      {posts.map(post => (\r\n        <article className=\"post-excerpt\" key={post.id}>\r\n          <h3>{post.title}</h3>\r\n\r\n          <p className=\"post-content\">\r\n            {post.content.substring(0, 100)}\r\n          </p>\r\n\r\n          <div>\r\n            <PostAuthor userId={post.user} />\r\n            <TimeAgo timestamp={post.date} />\r\n          </div>\r\n\r\n          <Link\r\n            to={`/posts/${post.id}`}\r\n            className=\"button muted-button\"\r\n          >\r\n            View Post\r\n          </Link>\r\n        </article>\r\n      ))}\r\n    </section>\r\n  )\r\n}\r\n","import { createSlice, nanoid } from '@reduxjs/toolkit'\r\n\r\nconst initialState = [\r\n  { id: '1', title: 'First Post!', content: 'Hello!' },\r\n  { id: '2', title: 'Second Post', content: 'More text' },\r\n];\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postAdded: {\r\n      reducer(state, action) {\r\n        state.push(action.payload);\r\n      },\r\n      prepare(title, content, userId) {\r\n        return {\r\n          payload: {\r\n            id: nanoid(),\r\n            date: new Date().toISOString(),\r\n            title,\r\n            content,\r\n            user: userId,\r\n          }\r\n        };\r\n      },\r\n    },\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload;\r\n      const existingPost = state.find(post => post.id === id);\r\n\r\n      if (existingPost) {\r\n        existingPost.title = title;\r\n        existingPost.content = content;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { postAdded, postUpdated } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { postAdded } from '../postsSlice';\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const users = useSelector(state => state.users);\r\n\r\n  const onTitleChange = e => setTitle(e.target.value);\r\n  const onContentChange = e => setContent(e.target.value);\r\n  const onAuthorChange = e => setUserId(e.target.value);\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postAdded(title, content, userId));\r\n\r\n      setTitle('');\r\n      setContent('');\r\n    }\r\n  };\r\n\r\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId);\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New post</h2>\r\n\r\n      <form action=\"\">\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          value={title}\r\n          onChange={onTitleChange}\r\n        />\r\n\r\n        <label htmlFor=\"postAuthor\">Author:</label>\r\n        <select\r\n          id=\"postAuthor\"\r\n          value={userId}\r\n          onChange={onAuthorChange}\r\n        >\r\n          <option value=\"\">Please select an Author</option>\r\n          {users.map(user => (\r\n            <option value={user.id} key={user.id}>\r\n              {user.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChange}\r\n        />\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={onSavePostClicked}\r\n          disabled={!canSave}\r\n        >\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { Link } from 'react-router-dom'\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector(state =>\r\n    state.posts.find(post => post.id === postId)\r\n  );\r\n\r\n  return (\r\n    <section>\r\n      {!post && (\r\n        <h2>Post not found</h2>\r\n      )}\r\n      <article className=\"post\">\r\n        <h2>{post.title}</h2>\r\n\r\n        <p className=\"post-content\">{post.content}</p>\r\n\r\n        <div>\r\n          <PostAuthor userId={post.user} />\r\n          <TimeAgo timestamp={post.date} />\r\n        </div>\r\n\r\n\r\n        <Link to={`/editPost/${post.id}`} className=\"button\">\r\n            Edit post\r\n        </Link>\r\n      </article>\r\n    </section>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { postUpdated } from '../postsSlice';\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector(state =>\r\n    state.posts.find(post => post.id === postId)\r\n  )\r\n\r\n  const [title, setTitle] = useState(post.title);\r\n  const [content, setContent] = useState(post.content);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const onTitleChange = e => setTitle(e.target.value);\r\n  const onContentChange = e => setContent(e.target.value);\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postUpdated({\r\n        id: postId,\r\n        title,\r\n        content\r\n      }));\r\n\r\n      history.push(`/posts/${postId}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChange}\r\n        />\r\n\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChange}\r\n        />\r\n      </form>\r\n\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Save Post\r\n      </button>\r\n    </section>\r\n  )\r\n};\r\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\nimport { PostList } from './features/posts/components/PostsList'\nimport { AddPostForm } from './features/posts/components/AddPostForm'\nimport { SinglePostPage } from './features/posts/components/SinglePostPage'\nimport { EditPostForm } from './features/posts/components/EditPostForm'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = [\r\n  { id: '0', name: 'Tianna Jenkins' },\r\n  { id: '1', name: 'Kevin Grant' },\r\n  { id: '2', name: 'Madison Price' },\r\n];\r\n\r\nconst usersSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {},\r\n})\r\n\r\nexport default usersSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport postsReducer from '../features/posts/postsSlice';\nimport usersReducer from '../features/users/usersSlice';\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer,\n  },\n});\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport './api/server'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}