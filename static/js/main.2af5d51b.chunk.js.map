{"version":3,"sources":["app/Navbar.js","features/posts/PostsList.js","features/posts/postsSlice.js","features/posts/AddPostForm.js","features/posts/SinglePostPage.js","features/posts/EditPostForm.js","App.js","api/server.js","app/store.js","index.js"],"names":["Navbar","className","to","PostList","posts","useSelector","state","map","post","key","id","title","content","substring","postsSlice","createSlice","name","initialState","reducers","postAdded","action","push","payload","postUpdated","existingPost","find","actions","AddPostForm","useState","setTitle","setContent","dispatch","useDispatch","htmlFor","type","placeholder","value","onChange","e","target","onClick","nanoid","SinglePostPage","postId","match","params","EditPostForm","history","useHistory","App","seedDate","exact","path","render","Fragment","component","configureStore","reducer","postsReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","resource","server","schema","req","data","normalizedRequestAttrs","date","user","users","userId","Error","create","get","comments","pastDate","numNotifications","now","queryParams","since","parseISO","valueOf","setMinutes","getMinutes","notifications","Array","db","template","between","message","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","reactions","thumbsUp","hooray","heart","rocket","eyes","association","past","text","paragraph","serializers","seeds","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"qPAIaA,EAAS,WACpB,OACE,6BACE,iCACE,wDAEA,yBAAKC,UAAU,cACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,c,QCRCC,EAAW,WACtB,IAAMC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAEzC,OACE,iCACE,qCACCA,EAAMG,KAAI,SAAAC,GAAI,OACb,6BAASP,UAAU,gBAAgBQ,IAAKD,EAAKE,IAC3C,4BAAKF,EAAKG,OAEV,uBAAGV,UAAU,gBACVO,EAAKI,QAAQC,UAAU,EAAG,MAG7B,kBAAC,IAAD,CACEX,GAAE,iBAAYM,EAAKE,IACnBT,UAAU,uBAFZ,mB,gBCXJa,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAPmB,CACnB,CAAEP,GAAI,IAAKC,MAAO,cAAeC,QAAS,UAC1C,CAAEF,GAAI,IAAKC,MAAO,cAAeC,QAAS,cAM1CM,SAAU,CACRC,UADQ,SACEb,EAAOc,GACfd,EAAMe,KAAKD,EAAOE,UAEpBC,YAJQ,SAIIjB,EAAOc,GAAS,IAAD,EACMA,EAAOE,QAA9BZ,EADiB,EACjBA,GAAIC,EADa,EACbA,MAAOC,EADM,EACNA,QACbY,EAAelB,EAAMmB,MAAK,SAAAjB,GAAI,OAAIA,EAAKE,KAAOA,KAEhDc,IACFA,EAAab,MAAQA,EACrBa,EAAaZ,QAAUA,O,EAMWE,EAAWY,QAAtCP,E,EAAAA,UAAWI,E,EAAAA,YAEXT,IAAf,QCtBaa,EAAc,WAAO,IAAD,EACLC,mBAAS,IADJ,mBACxBjB,EADwB,KACjBkB,EADiB,OAEDD,mBAAS,IAFR,mBAExBhB,EAFwB,KAEfkB,EAFe,KAIzBC,EAAWC,cAoBjB,OACE,iCACE,8CAEA,0BAAMZ,OAAO,IACX,2BAAOa,QAAQ,aAAf,eACA,2BACEC,KAAK,OACLxB,GAAG,YACHM,KAAK,YACLmB,YAAY,uBACZC,MAAOzB,EACP0B,SA9Bc,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOH,UAiCvC,2BAAOH,QAAQ,eAAf,YACA,8BACEvB,GAAG,cACHM,KAAK,cACLoB,MAAOxB,EACPyB,SArCgB,SAAAC,GAAC,OAAIR,EAAWQ,EAAEC,OAAOH,UAwC3C,4BACEF,KAAK,SACLM,QAxCkB,WACpB7B,GAASC,IACXmB,EACEZ,EAAU,CACRT,GAAI+B,cACJ9B,QACAC,aAIJiB,EAAS,IACTC,EAAW,OA2BT,gBCjDKY,EAAiB,SAAC,GAAe,IACpCC,EADmC,EAAZC,MACNC,OAAjBF,OAEFnC,EAAOH,aAAY,SAAAC,GAAK,OAC5BA,EAAMF,MAAMqB,MAAK,SAAAjB,GAAI,OAAIA,EAAKE,KAAOiC,QAGvC,OACE,kCACInC,GACA,8CAEF,6BAASP,UAAU,QACjB,4BAAKO,EAAKG,OAEV,uBAAGV,UAAU,gBAAgBO,EAAKI,SAElC,kBAAC,IAAD,CAAMV,GAAE,oBAAeM,EAAKE,IAAMT,UAAU,UAA5C,gBCfK6C,EAAe,SAAC,GAAe,IAClCH,EADiC,EAAZC,MACJC,OAAjBF,OAEFnC,EAAOH,aAAY,SAAAC,GAAK,OAC5BA,EAAMF,MAAMqB,MAAK,SAAAjB,GAAI,OAAIA,EAAKE,KAAOiC,QAJE,EAOff,mBAASpB,EAAKG,OAPC,mBAOlCA,EAPkC,KAO3BkB,EAP2B,OAQXD,mBAASpB,EAAKI,SARH,mBAQlCA,EARkC,KAQzBkB,EARyB,KAUnCC,EAAWC,cACXe,EAAUC,cAiBhB,OACE,iCACE,yCAEA,8BACE,2BAAOf,QAAQ,aAAf,eACA,2BACEC,KAAK,OACLxB,GAAG,YACHM,KAAK,YACLmB,YAAY,uBACZC,MAAOzB,EACP0B,SA3Bc,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOH,UA8BvC,2BAAOH,QAAQ,eAAf,YACA,8BACEvB,GAAG,cACHM,KAAK,cACLoB,MAAOxB,EACPyB,SAlCgB,SAAAC,GAAC,OAAIR,EAAWQ,EAAEC,OAAOH,WAsC7C,4BAAQF,KAAK,SAASM,QApCA,WACpB7B,GAASC,IACXmB,EAASR,EAAY,CACnBb,GAAIiC,EACJhC,QACAC,aAGFmC,EAAQ1B,KAAR,iBAAuBsB,OA4BvB,eCnBSM,ICRTC,EDQSD,EAzBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKhD,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEkD,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACN,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UAIN,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,iBAAiBG,UAAWb,IAC9C,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,oBAAoBG,UAAWT,IACjD,kBAAC,IAAD,CAAU5C,GAAG,UE5BRsD,cAAe,CAC5BC,QAAS,CACPrD,MAAOsD,K,mEDWLC,EAAeC,IAAeC,OAAO,CACzCC,aAAc,WASZC,EAAMC,MAGJC,EAAmBC,aAAaC,QAAQ,uBAgB9C,SAASC,EAAaC,EAAKC,GAGzB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMV,KAASO,EAAMD,EAAM,IAAMA,EAhBzCJ,EACFf,EAAW,IAAIwB,KAAKT,IAGpBA,GADAf,EAAW,IAAIwB,MACaC,cAC5BT,aAAaU,QAAQ,sBAAuBX,IAG9CF,EAAMC,IAAWC,GACjBY,oBAAUd,GACVe,IAAMC,KAAK7B,EAAS8B,WAStB,IAAMC,EAAkB,SAACC,GAEvB,OAAOA,EADOd,EAAa,EAAGc,EAAMC,OAAS,KAIzCC,EAAwB,CAC5B,YACA,WAF4B,wBAI5B,mBAGF,IAAIC,IAAO,CACTC,OADS,WAEPC,KAAKC,UAAY,UAGjBD,KAAKE,SAAS,SACdF,KAAKE,SAAS,SACdF,KAAKE,SAAS,YAEd,IAAMC,EAASH,KAEfA,KAAK/E,KAAK,UAAU,SAAUmF,EAAQC,GACpC,IAAMC,EAAON,KAAKO,yBAClBD,EAAKE,MAAO,IAAIrB,MAAOC,cAIvB,IAAMqB,EAAOL,EAAOM,MAAMxE,KAAKoE,EAAKK,QAGpC,GAFAL,EAAKG,KAAOA,EAES,UAAjBH,EAAKjF,QACP,MAAM,IAAIuF,MAAM,4BAIlB,OADeT,EAAOU,OAAO,OAAQP,MAIvCN,KAAKc,IAAI,2BAA2B,SAACV,EAAQC,GAE3C,OADaD,EAAOvF,MAAMqB,KAAKmE,EAAI/C,OAAOF,QAC9B2D,YAGdf,KAAKc,IAAI,kBAAkB,SAACV,EAAQC,GAClC,IAEIW,EAFEC,EAAmBpC,EAAa,EAAG,GAInCqC,EAAM,IAAI/B,KAwBhB,OAtBIkB,EAAIc,YAAYC,MAClBJ,EAAWK,YAAShB,EAAIc,YAAYC,QAEpCJ,EAAW,IAAI7B,KAAK+B,EAAII,YACfC,WAAWP,EAASQ,aAAe,IAkBvC,CAAEC,cAba,YAAIC,MAAMT,IAAmBjG,KAAI,WACrD,IAAMyF,EAAOf,EAAgBU,EAAOuB,GAAGjB,OACjCkB,EAAWlC,EAAgBG,GACjC,MAAO,CACL1E,GAAI+B,cACJsD,KAAMjB,IAAMiB,KAAKqB,QAAQb,EAAUE,GAAK9B,cACxC0C,QAASF,EACTnB,KAAMA,EAAKtF,GACX4G,MAAM,EACNC,OAAO,WAOfC,OAAQ,CACNxB,KAAMyB,IAAM5D,OAAO,CACjBzD,MAAOsH,gBAETlH,KAAMiH,IAAM5D,OAAO,CACjBmC,KAAM2B,cACNrB,SAAUoB,gBAEZE,QAASH,IAAM5D,OAAO,CACpBrD,KAAMmH,gBAERE,aAAcJ,IAAM5D,OAAO,KAE7BiE,UAAW,CACT9B,KAAM+B,IAAQlE,OAAO,CACnBnD,GADmB,WAEjB,OAAO+B,eAETuF,UAJmB,WAKjB,OAAOlD,IAAM9D,KAAKgH,aAEpBC,SAPmB,WAQjB,OAAOnD,IAAM9D,KAAKiH,YAEpBjH,KAVmB,WAWjB,OAAO8D,IAAM9D,KAAKkH,SAAS3C,KAAKyC,UAAWzC,KAAK0C,WAElDE,SAbmB,WAcjB,OAAOrD,IAAMsD,SAASC,SAAS9C,KAAKyC,UAAWzC,KAAK0C,WAGtDK,YAjBmB,SAiBPtC,EAAMN,GAChBA,EAAO6C,WAAW,OAAQ,EAAG,CAAEvC,YAGnCxF,KAAMuH,IAAQlE,OAAO,CACnBnD,GADmB,WAEjB,OAAO+B,eAET9B,MAJmB,WAKjB,OAAO6H,sBAETzC,KAPmB,WAQjB,OAAOjB,IAAMiB,KAAK0C,OAAO,IAE3B7H,QAVmB,WAWjB,OAAO8H,kBAAQ,IAEjBC,UAbmB,WAcjB,MAAO,CACLC,SAAU,EACVC,OAAQ,EACRC,MAAO,EACPC,OAAQ,EACRC,KAAM,IAGVV,YAtBmB,SAsBP9H,EAAMkF,KAIlBM,KAAMiD,gBAERrB,QAASG,IAAQlE,OAAO,CACtBnD,GADsB,WAEpB,OAAO+B,eAETsD,KAJsB,WAKpB,OAAOjB,IAAMiB,KAAKmD,KAAK,IAEzBC,KAPsB,WAQpB,OAAOC,uBAET5I,KAAMyI,iBAGVI,YAAa,CACXrD,KAAMrC,EACNnD,KAAMmD,EACNiE,QAASjE,GAEX2F,MAlJS,SAkJH5D,GACJA,EAAO6C,WAAW,OAAQ,ME1M9BgB,IAASlG,OACP,kBAAC,IAAMmG,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,U","file":"static/js/main.2af5d51b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  );\n};\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const PostList = () => {\r\n  const posts = useSelector(state => state.posts);\r\n\r\n  return (\r\n    <section>\r\n      <h2>Posts</h2>\r\n      {posts.map(post => (\r\n        <article className=\"posts-excerpt\" key={post.id}>\r\n          <h3>{post.title}</h3>\r\n\r\n          <p className=\"post-content\">\r\n            {post.content.substring(0, 100)}\r\n          </p>\r\n\r\n          <Link\r\n            to={`/posts/${post.id}`}\r\n            className=\"button muted-button\"\r\n          >\r\n            View Post\r\n          </Link>\r\n        </article>\r\n      ))}\r\n    </section>\r\n  )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = [\r\n  { id: '1', title: 'First Post!', content: 'Hello!' },\r\n  { id: '2', title: 'Second Post', content: 'More text' }\r\n];\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postAdded(state, action) {\r\n      state.push(action.payload);\r\n    },\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload;\r\n      const existingPost = state.find(post => post.id === id);\r\n\r\n      if (existingPost) {\r\n        existingPost.title = title;\r\n        existingPost.content = content;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { postAdded, postUpdated } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\n\r\nimport { postAdded } from './postsSlice'\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onTitleChange = e => setTitle(e.target.value);\r\n  const onContentChange = e => setContent(e.target.value);\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(\r\n        postAdded({\r\n          id: nanoid(),\r\n          title,\r\n          content,\r\n        })\r\n      );\r\n\r\n      setTitle('');\r\n      setContent('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New post</h2>\r\n\r\n      <form action=\"\">\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChange}\r\n        />\r\n\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChange}\r\n        />\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={onSavePostClicked}\r\n        >\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector(state =>\r\n    state.posts.find(post => post.id === postId)\r\n  );\r\n\r\n  return (\r\n    <section>\r\n      {!post && (\r\n        <h2>Post not found</h2>\r\n      )}\r\n      <article className=\"post\">\r\n        <h2>{post.title}</h2>\r\n\r\n        <p className=\"post-content\">{post.content}</p>\r\n\r\n        <Link to={`/editPost/${post.id}`} className=\"button\">\r\n            Edit post\r\n        </Link>\r\n      </article>\r\n    </section>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { postUpdated } from './postsSlice';\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector(state =>\r\n    state.posts.find(post => post.id === postId)\r\n  )\r\n\r\n  const [title, setTitle] = useState(post.title);\r\n  const [content, setContent] = useState(post.content);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const onTitleChange = e => setTitle(e.target.value);\r\n  const onContentChange = e => setContent(e.target.value);\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postUpdated({\r\n        id: postId,\r\n        title,\r\n        content\r\n      }));\r\n\r\n      history.push(`/posts/${postId}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChange}\r\n        />\r\n\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChange}\r\n        />\r\n      </form>\r\n\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Save Post\r\n      </button>\r\n    </section>\r\n  )\r\n};\r\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\nimport { PostList } from './features/posts/PostsList'\nimport { AddPostForm } from './features/posts/AddPostForm'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\nimport { EditPostForm } from './features/posts/EditPostForm'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport postsReducer from '../features/posts/postsSlice';\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n  },\n});\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport './api/server'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}